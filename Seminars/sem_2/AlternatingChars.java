// –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
// üìå –î–∞–Ω–æ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ N (>0) –∏ —Å–∏–º–≤–æ–ª—ã c1 –∏ c2.
// üìå –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω—ã N, –∫–æ—Ç–æ—Ä–∞—è
// —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ c1 –∏ c2, –Ω–∞—á–∏–Ω–∞—è —Å c1.

// c1c2c1‚Ä¶c2 (–≤—Å–µ–≥–æ N —Å–∏–º–≤–æ–ª–æ–≤)

// String / Stringbuilding

package sem_2;

public class AlternatingChars {
    public static void main(String[] args) { // –≤–≤–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        int n = 100_000;
        char c1 = 'a';
        char c2 = 'b';

        // System.out.println(alternatingCharsString(n, c1, c2));
        // System.out.println(alternatingCharsSb(n, c1, c2));

        // –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 2—Ö –º–µ—Ç–æ–¥–æ–≤ String and Stringbuilder
        long start = System.currentTimeMillis();
        alternatingCharsString(n, c1, c2);
        System.out.println(System.currentTimeMillis() - start); // 541 –º–∏–ª–∏—Å–µ–∫—É–Ω–¥—ã

        start = System.currentTimeMillis();
        alternatingCharsSb(n, c1, c2);
        System.out.println(System.currentTimeMillis() - start); // 3
    }

    public static String alternatingCharsString(int n, char c1, char c2) {
        String str = ""; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        for (int i = 0; i < n / 2; i++) { // –¥–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º, —Ç.–∫. –≤ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –ø–∞—Ä–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å1, —Å2
            str = str + c1 + c2;
            // str += Character.toString(c1) + Character.toString(c2); //–ª–∏–±–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤
            // —Å—Ç—Ä–æ–∫—É
        }
        return str;
    }

    public static String alternatingCharsSb(int n, char c1, char c2) { // –ø—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ StringBuilder
        StringBuilder sb = new StringBuilder(n);
        for (int i = 0; i < n / 2; i++) { // –¥–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º, —Ç.–∫. –≤ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –ø–∞—Ä–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å1, —Å2
            sb.append(c1).append(c2);
            // str += Character.toString(c1) + Character.toString(c2); //–ª–∏–±–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤
            // —Å—Ç—Ä–æ–∫—É
        }
        return sb.toString();
    }

}
